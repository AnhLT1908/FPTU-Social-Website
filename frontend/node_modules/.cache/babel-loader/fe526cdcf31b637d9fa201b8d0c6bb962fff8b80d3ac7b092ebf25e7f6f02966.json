{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { Form, Button, Container, Row, Col, Card } from \"react-bootstrap\";\n// import { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\n// import { jwtDecode } from \"jwt-decode\";\n\n// const GOOGLE_CLIENT_ID =\n//   \"838027680646-ojcsa5po17k2c7a2qnqhksfup166meef.apps.googleusercontent.com\";\n\n// const LoginForm = () => {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [errors, setErrors] = useState({});\n//   const [validated, setValidated] = useState(false);\n\n//   const handleLogin = (e) => {\n//     e.preventDefault();\n//     if (validateForm()) {\n//       // Handle login logic if form is valid\n//       console.log({ email, password });\n//     } else {\n//       setValidated(true); // Set validated state to true to show errors\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     // Email validation (basic regex for email format)\n//     if (!email) {\n//       newErrors.email = \"Email is required.\";\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n//       newErrors.email = \"Invalid email format.\";\n//     }\n\n//     // Password validation (min length 6)\n//     if (!password) {\n//       newErrors.password = \"Password is required.\";\n//     } else if (password.length < 6) {\n//       newErrors.password = \"Password must be at least 6 characters.\";\n//     }\n\n//     setErrors(newErrors);\n\n//     // If no errors, return true\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleGoogleSuccess = (credentialResponse) => {\n//     const details = jwtDecode(credentialResponse.credential);\n//     console.log(\"Logged in user:\", details);\n//   };\n\n//   const handleGoogleError = () => {\n//     console.log(\"Google Sign-In was unsuccessful\");\n//   };\n\n//   return (\n//     <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\n//       <Container\n//         className=\"d-flex justify-content-center align-items-center\"\n//         style={{ minHeight: \"100vh\" }}\n//       >\n//         <Row>\n//           <Col>\n//             <div className=\"text-center mb-4\">\n//               <img src=\"\" alt=\"Logo\" className=\"mb-3\" />\n//               <h1>FPTU Social Website</h1>\n//               <p>The Internet Home Place, where many communities reside</p>\n//             </div>\n\n//             <Card className=\"p-4 shadow-sm\" style={{ width: \"500px\" }}>\n//               <Card.Body>\n//                 <h2 className=\"fw-bold\">Log In</h2>\n//                 <h6 className=\"mb-4 fw-normal\">\n//                   By continuing, you agree to our User Agreement and acknowledge\n//                   that you understand the Privacy Policy\n//                 </h6>\n\n//                 <div className=\"mb-2\">\n//                   <GoogleLogin\n//                     onSuccess={handleGoogleSuccess}\n//                     onError={handleGoogleError}\n//                     useOneTap\n//                   />\n//                 </div>\n\n//                 <div className=\"d-flex align-items-center my-2\">\n//                   <div\n//                     className=\"flex-grow-1 bg-secondary\"\n//                     style={{ height: \"1px\" }}\n//                   ></div>\n//                   <span className=\"mx-4 text-muted\">OR</span>\n//                   <div\n//                     className=\"flex-grow-1 bg-secondary\"\n//                     style={{ height: \"1px\" }}\n//                   ></div>\n//                 </div>\n\n//                 <Form noValidate validated={validated} onSubmit={handleLogin}>\n//                   <Form.Group className=\"mb-3\" controlId=\"formEmail\">\n//                     <Form.Control\n//                       type=\"email\"\n//                       placeholder=\"Email or username *\"\n//                       value={email}\n//                       onChange={(e) => setEmail(e.target.value)}\n//                       required\n//                       isInvalid={!!errors.email}\n//                       style={{\n//                         borderRadius: \"20px\",\n//                         height: \"60px\",\n//                         backgroundColor: \"#d7d6d6\",\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type=\"invalid\">\n//                       {errors.email}\n//                     </Form.Control.Feedback>\n//                   </Form.Group>\n\n//                   <Form.Group controlId=\"formPassword\" className=\"mt-3\">\n//                     <Form.Control\n//                       type=\"password\"\n//                       placeholder=\"Password *\"\n//                       value={password}\n//                       onChange={(e) => setPassword(e.target.value)}\n//                       required\n//                       isInvalid={!!errors.password}\n//                       style={{\n//                         borderRadius: \"20px\",\n//                         height: \"60px\",\n//                         backgroundColor: \"#d7d6d6\",\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type=\"invalid\">\n//                       {errors.password}\n//                     </Form.Control.Feedback>\n//                   </Form.Group>\n\n//                   <div className=\"mt-3\">\n//                     <a href=\"/forgot-password\" style={{ textDecoration: \"none\" }}>\n//                       Forgot Password?\n//                     </a>\n//                   </div>\n\n//                   <div className=\"mt-3\">\n//                     New to our community?{\" \"}\n//                     <a href=\"/register\" style={{ textDecoration: \"none\" }}>\n//                       Sign up\n//                     </a>\n//                   </div>\n\n//                   <Button\n//                     type=\"submit\"\n//                     className=\"mt-4 w-100\"\n//                     style={{\n//                       borderRadius: \"20px\",\n//                       height: \"45px\",\n//                       backgroundColor: \"#ff5e00\",\n//                     }}\n//                   >\n//                     Log In\n//                   </Button>\n//                 </Form>\n//               </Card.Body>\n//             </Card>\n//           </Col>\n//         </Row>\n//       </Container>\n//     </GoogleOAuthProvider>\n//   );\n// };\n\n// export default LoginForm;","map":{"version":3,"names":[],"sources":["E:/FPTU-Social-Website/frontend/src/components/Login.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { Form, Button, Container, Row, Col, Card } from \"react-bootstrap\";\r\n// import { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n\r\n// const GOOGLE_CLIENT_ID =\r\n//   \"838027680646-ojcsa5po17k2c7a2qnqhksfup166meef.apps.googleusercontent.com\";\r\n\r\n// const LoginForm = () => {\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [errors, setErrors] = useState({});\r\n//   const [validated, setValidated] = useState(false);\r\n\r\n//   const handleLogin = (e) => {\r\n//     e.preventDefault();\r\n//     if (validateForm()) {\r\n//       // Handle login logic if form is valid\r\n//       console.log({ email, password });\r\n//     } else {\r\n//       setValidated(true); // Set validated state to true to show errors\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     // Email validation (basic regex for email format)\r\n//     if (!email) {\r\n//       newErrors.email = \"Email is required.\";\r\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n//       newErrors.email = \"Invalid email format.\";\r\n//     }\r\n\r\n//     // Password validation (min length 6)\r\n//     if (!password) {\r\n//       newErrors.password = \"Password is required.\";\r\n//     } else if (password.length < 6) {\r\n//       newErrors.password = \"Password must be at least 6 characters.\";\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n\r\n//     // If no errors, return true\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleGoogleSuccess = (credentialResponse) => {\r\n//     const details = jwtDecode(credentialResponse.credential);\r\n//     console.log(\"Logged in user:\", details);\r\n//   };\r\n\r\n//   const handleGoogleError = () => {\r\n//     console.log(\"Google Sign-In was unsuccessful\");\r\n//   };\r\n\r\n//   return (\r\n//     <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\r\n//       <Container\r\n//         className=\"d-flex justify-content-center align-items-center\"\r\n//         style={{ minHeight: \"100vh\" }}\r\n//       >\r\n//         <Row>\r\n//           <Col>\r\n//             <div className=\"text-center mb-4\">\r\n//               <img src=\"\" alt=\"Logo\" className=\"mb-3\" />\r\n//               <h1>FPTU Social Website</h1>\r\n//               <p>The Internet Home Place, where many communities reside</p>\r\n//             </div>\r\n\r\n//             <Card className=\"p-4 shadow-sm\" style={{ width: \"500px\" }}>\r\n//               <Card.Body>\r\n//                 <h2 className=\"fw-bold\">Log In</h2>\r\n//                 <h6 className=\"mb-4 fw-normal\">\r\n//                   By continuing, you agree to our User Agreement and acknowledge\r\n//                   that you understand the Privacy Policy\r\n//                 </h6>\r\n\r\n//                 <div className=\"mb-2\">\r\n//                   <GoogleLogin\r\n//                     onSuccess={handleGoogleSuccess}\r\n//                     onError={handleGoogleError}\r\n//                     useOneTap\r\n//                   />\r\n//                 </div>\r\n\r\n//                 <div className=\"d-flex align-items-center my-2\">\r\n//                   <div\r\n//                     className=\"flex-grow-1 bg-secondary\"\r\n//                     style={{ height: \"1px\" }}\r\n//                   ></div>\r\n//                   <span className=\"mx-4 text-muted\">OR</span>\r\n//                   <div\r\n//                     className=\"flex-grow-1 bg-secondary\"\r\n//                     style={{ height: \"1px\" }}\r\n//                   ></div>\r\n//                 </div>\r\n\r\n//                 <Form noValidate validated={validated} onSubmit={handleLogin}>\r\n//                   <Form.Group className=\"mb-3\" controlId=\"formEmail\">\r\n//                     <Form.Control\r\n//                       type=\"email\"\r\n//                       placeholder=\"Email or username *\"\r\n//                       value={email}\r\n//                       onChange={(e) => setEmail(e.target.value)}\r\n//                       required\r\n//                       isInvalid={!!errors.email}\r\n//                       style={{\r\n//                         borderRadius: \"20px\",\r\n//                         height: \"60px\",\r\n//                         backgroundColor: \"#d7d6d6\",\r\n//                       }}\r\n//                     />\r\n//                     <Form.Control.Feedback type=\"invalid\">\r\n//                       {errors.email}\r\n//                     </Form.Control.Feedback>\r\n//                   </Form.Group>\r\n\r\n//                   <Form.Group controlId=\"formPassword\" className=\"mt-3\">\r\n//                     <Form.Control\r\n//                       type=\"password\"\r\n//                       placeholder=\"Password *\"\r\n//                       value={password}\r\n//                       onChange={(e) => setPassword(e.target.value)}\r\n//                       required\r\n//                       isInvalid={!!errors.password}\r\n//                       style={{\r\n//                         borderRadius: \"20px\",\r\n//                         height: \"60px\",\r\n//                         backgroundColor: \"#d7d6d6\",\r\n//                       }}\r\n//                     />\r\n//                     <Form.Control.Feedback type=\"invalid\">\r\n//                       {errors.password}\r\n//                     </Form.Control.Feedback>\r\n//                   </Form.Group>\r\n\r\n//                   <div className=\"mt-3\">\r\n//                     <a href=\"/forgot-password\" style={{ textDecoration: \"none\" }}>\r\n//                       Forgot Password?\r\n//                     </a>\r\n//                   </div>\r\n\r\n//                   <div className=\"mt-3\">\r\n//                     New to our community?{\" \"}\r\n//                     <a href=\"/register\" style={{ textDecoration: \"none\" }}>\r\n//                       Sign up\r\n//                     </a>\r\n//                   </div>\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     className=\"mt-4 w-100\"\r\n//                     style={{\r\n//                       borderRadius: \"20px\",\r\n//                       height: \"45px\",\r\n//                       backgroundColor: \"#ff5e00\",\r\n//                     }}\r\n//                   >\r\n//                     Log In\r\n//                   </Button>\r\n//                 </Form>\r\n//               </Card.Body>\r\n//             </Card>\r\n//           </Col>\r\n//         </Row>\r\n//       </Container>\r\n//     </GoogleOAuthProvider>\r\n//   );\r\n// };\r\n\r\n// export default LoginForm;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}